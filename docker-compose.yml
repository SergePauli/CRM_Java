# Файл docker-compose должен начинаться с тега версии.

version: "2.6.1"

# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'.

services:
  
  # Первый сервис (контейнер): сервер СУБД (mySQL).  

  database:
 
    # используем готовый образ
    # который позволит запустить сервис.
    
    image: "mysql:latest" 
    
    # мы должны организовать перенаправление этого порта на порт компьютера.
    # Сделать это нам поможет ключевое слово 'ports'.  
      

    ports:
      - 3306:3306

    # обеспечить сохранение данных при отключении контейнера поможет 
    # задание пути абсолютного пути к папке во внешней системе 'volumes'
    volumes:
      - /home/sergepauli/CRM_Java/db_data:/var/lib/mysql
    
    # пароль от рут-пользователя задается в 
    # специальном разделе переменных окружения 'environment'

    environment:
      - MYSQL_ROOT_PASSWORD=toor  

  # Второй сервис (контейнер): сервер приложения
  # Этот сервис назван 'web-server'.
  # Ключевое слово "build" позволяет задать
  # путь к файлу Dockerfile, который нужно использовать для создания образа

  web_server:
    # Здесь 'client/ соответствует пути к папке, которая содержит
    # файл Dockerfile для клиентской части системы.

    build: glassfish/
    ports:
      - 4848:4848/tcp
      - 8080:8080/tcp
      - 8181:8181/tcp    

    # обеспечить сохранение данных домена при отключении контейнера поможет 
    # задание пути абсолютного пути к папке во внешней системе 'volumes'
    volumes:
      - /home/sergepauli/CRM_Java/glassfish/backups/domain1:/usr/local/glassfish4/glassfish/domains/domain1
    # Ключевое слово 'network_mode' используется для описания типа сети.
    # Тут мы указываем то, что контейнер может обращаться к 'localhost' компьютера.

    network_mode: host

    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
    # Нам нужно, чтобы сервис 'web_server' дождался бы готовности к работе сервиса 'database'.
 
    depends_on:
      - database
